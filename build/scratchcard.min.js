"use strict";var _extends=Object.assign||function(t){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e])}return t};function ScratchCard(t,o){var n={width:"300",height:"300",imageForwardSrc:null,colorForward:"gray",imageBackgroundSrc:null,colorBackground:"red",clearRadius:50,percentToFinish:null,callback:function(){console.log("card clear")},open:function(){console.log("card open")}};this.canvas=document.createElement("canvas"),this.ctx=this.canvas.getContext("2d"),this.progress=0,this.old={x:0,Y:0},this.feedback=!1,this.options=_extends({},n,o),this.init(t)}ScratchCard.prototype.init=function(t){var n=this;console.log(t),t.appendChild(n.canvas),n.canvas.width=n.options.width,n.canvas.height=n.options.height,new Promise(function(t){if(n.options.imageForwardSrc){var o=new Image;o.onload=function(){n.ctx.drawImage(o,0,0,n.options.width,n.options.height),t(!0)},o.src=n.options.imageForwardSrc}else n.ctx.fillStyle=n.options.colorForward,n.ctx.fillRect(0,0,n.options.width,n.options.height),t(!0)}).then(function(){n.options.imageBackgroundSrc?t.style.background="url("+n.options.imageBackgroundSrc+")":t.style.background=n.options.colorBackground,t.style.backgroundSize="cover",t.style.fontSize="0",t.style.display="inline-block"}),this.drawSet()},ScratchCard.prototype.drawSet=function(){var c=this,i=!1,a=["mousedown","touchstart"],r=["mousemove","touchmove"],s=["mouseup","touchend"];function l(t){var o=c.canvas.getBoundingClientRect();i=!0,c.old={x:t.clientX||t.targetTouches[0].clientX,y:t.clientY||t.targetTouches[0].clientY},c.old.x-=o.left,c.old.y-=o.top,c.ctx.globalCompositeOperation="destination-out",c.ctx.beginPath(),c.ctx.arc(c.old.x,c.old.y,c.options.clearRadius/2,0,2*Math.PI),c.ctx.fill()}function d(t){if(t.preventDefault(),i){var o=c.canvas.getBoundingClientRect(),n=t.clientX||t.targetTouches[0].clientX,e=t.clientY||t.targetTouches[0].clientY;n-=o.left,e-=o.top,c.ctx.beginPath(),c.ctx.arc(c.old.x,c.old.y,c.options.clearRadius/2,0,2*Math.PI),c.ctx.fill(),c.ctx.lineWidth=c.options.clearRadius,c.ctx.beginPath(),c.ctx.moveTo(c.old.x,c.old.y),c.ctx.lineTo(n,e),c.ctx.stroke(),c.old={x:n,y:e},c.progress=function(){for(var t=c.options.width*c.options.height,o=0,n=c.ctx.getImageData(0,0,c.options.width,c.options.height).data,e=3,i=n.length;e<i;e+=4)255<=n[e]&&o++;return Math.round((t-o)/t*100*Math.pow(10,2))/Math.pow(10,2)}(),c.options.percentToFinish&&c.progress>=c.options.percentToFinish&&(a.forEach(function(t){c.canvas.removeEventListener(t,l,!0)}),r.forEach(function(t){c.canvas.removeEventListener(t,d,!0)}),s.forEach(function(t){c.canvas.removeEventListener(t,h,!0)}),c.ctx.clearRect(0,0,c.options.width,c.options.height),c.options.callback())}}function h(t){i=!1}function o(t){if(!c.feedback)return c.feedback=!0,c.options.open()}a.forEach(function(t){c.canvas.addEventListener(t,l,!0),c.canvas.addEventListener(t,o,{once:!0,capture:!0})}),r.forEach(function(t){c.canvas.addEventListener(t,d,!0)}),s.forEach(function(t){c.canvas.addEventListener(t,h,!0)})};